BASIC JSON
{
    "name": "developer",		    - 1.node, 1.node.Key=name, 1.node.Value.Worth=developer, 1.node.Next=2.node (parent,prev nil)
    "image": "nginx"			    - 2.node.Prev=1.node, 2.node.Key=image, 2.node.Value.Worth=nginx (parent, next nil)
}

NESTED JSON
{
    "name": "developer",		    - 1.node, 1.node.Key=name, 1.node.Value.Worth=developer, 1.node.Next=2.node (parent, prev nil)
    "developer": {				    - 2.node.Prev=1.node, 2.node.Key=developer, 2.node.Value.Node=3.node, 2.node.Next=5.node (parent nil)
        "frontend": "angular",	    - 3.node.Parent=2.node, 3.node.Key=frontend, 3.node.Value.Worth=angular, 3.node.Next=4.node (prev nil)
        "backend:": "golang"	    - 4.node.Parent=3.node.Parent, 4.node.Prev=3.node, 4.node.Key=backend, 4.node.Value.Worth=golang (next nil)
    }
    "image": "nginx"			    - 5.node.Prev=2.node, 5.node.Key=image, 5.node.Value.Worth=nginx (parent, next nil)
}

ARRAY JSON
{
    "name": "developer",		    - 1.node, 1.node.Key=name, 1.node.Value.Worth=developer, 1.node.Next=2.node (parent, prev nil)
    "developer": [				    - 2.node.Prev=1.node, 2.node.Key=developer, 2.node.Value.Array, 2.node.Next=3.node (parent nil)
        "angular",				    - 2.node.Value.Array append Value.Worth=angular
        "golang"				    - 2.node.Value.Array append Value.Worth=golang
    ]
    "image": "nginx"			    - 3.node.Prev=2.node, 3.node.Key=image, 3.node.Value.Worth=nginx (parent, next nil)
}

COMPLEX JSON
{
    "name": "developer",		    - 1.node, 1.node.Next=2.node
    "developer": {			 	    - 2.node.Prev=1.node, 2.node.Value.Node=3.node, 2.node.Next=9.node
        "frontend": [				- 3.node.Parent=2.node, 3.node.Value.Array, 3.node.Next=5.node -> If there is an array, all objects should be appended.
            "angular",				- 3.node.Value.Array append Value.Worth=angular
            "javascript", 			- 3.node.Value.Array append Value.Worth=javascript
            {                       - 3.node.Value.Array append Value.Node=4.node -> If there is an object in the array. this object is the new node
                "test": "test"      - 4.node.Parent=3.node
            }
        ],
        "test": [					- 5.node=3.node.Next, 5.node.Prev=3.node, 5.node.Parent=3.node.Parent -> If there is an array, all objects should be appended.
            {"unit": "meter"},		- 5.node.Value.Array append Value.Node=6.node, 6.node.Parent=5.node, 6.node.Next=7.node
            {"price": 343.32},		- 5.node.Value.Array append Value.Node=7.node, 7.node.Parent=6.node.Parent, 7.node.Prev=6.node, 7.node.Next=8.node
            {"discount": [          - 5.node.Value.Array append Value.Node=8.node, 8.node.Parent=6.node.Parent, 8.node.Prev=7.node
                11,57               - 8.node.Value.Array append Value.Worth=11 and 57
            ]}
        ]
    },
    "image": "nginx",			    - 9.node=2.node.Next, 9.node.Prev=2.node, 9.node.Next=10.node
    "ports": [					    - 10.node=9.node.Next, 10.Node.Prev=9.node -> If there is an array, all objects should be appended.
        {							- 10.node.Value.Array append Value.Node=11.node -> If there is an object in the array. this object is the new node
            "containerPort": 80,	- 11.node.Parent=10.node, 11.node.Next=12.node
            "ports": [34,55],		- 12.node=11.node.Next, 12.node.Prev=11.node, 12.node.Next=13.node, 12.node.Value.Array append Value.Worth=34 and 55
            "status": ["on","off"]	- 13.node=12.node.Next, 13.node.Prev=12.node, 13.node.Value.Array append Value.Worth=on and off
        }
    ]
}